import numpy as np
# NumPy数组一般是同质的，即数组中的所有元素类型必须是一致的。好处：该数组所需的存储空间就很容易确定下来
# arange(5)的作用是创建一个包含5个元素的NumPy数组，取值分别为0~4的整数
# NumPy数组的类型是可选的，格式为: arrange(size, dtype = datatype)(datatype = int64、uint32等等)

a = np.arange(5)
print(a.dtype)
m = np.array([np.arange(3), np.arange(3), np.arange(3)])
print(m)
"""
array([[0, 1, 2],
       [0, 1, 2],
       [0, 1, 2]])
m是一个3*3的数组，也就是一个三行三列的矩阵
"""
# 多维数组的切片和索引
b = np.arange(24).reshape(2, 3, 4)
print(b.shape)
print(b)
"""
运行结果: 
(2, 3, 4)
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]
 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]

解释： 多维数组b中有0~23的整数，共24个元素，是一个2*3*4的三维数组。
形象比喻：一个两层楼建筑，每层楼有12个房间，并排列成3行4列。(三维分别是楼层、行号和列号)(注意与实际长方体的三维坐标加以区分)
也可以看成表格中工作表(sheet)、行和列的关系。
"""
print(b[0, 0, 0])  # 取第0层楼、第0行、第0列
# 0

print(b[:, 0, 0])  # 不关心楼层，即取所有楼层的第0行、第0列的房间(结果构成一个新的array)
# [ 0 12]

print(b[0])        # 取整个第0层楼，也可以写成b[0, :, :]，也可以写成b[0, ...](多个冒号可以用一个省略号来代替)
"""
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
"""

print(b[0, 1])     # 取第0层楼、第1行的所有元素
# [4 5 6 7]

print(b[0, 1, ::2])     # 每隔两个元素取第0层楼、第1行的元素(从第0个开始取)
# [4 6]

print(b[0, ::-1, -1])   # 反向取第0层楼的最后一列的所有房间
# [11  7  3]

# 如果在多维数组中执行翻转一维数组的命令，将在最前面的维度上翻转元素的顺序
print(b[::-1])
"""
[[[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]
 [[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]]
"""

print(b.ravel()) #将数组展平，展平为一维数组，大小为2*3*4 = 24，原数组b的维度不变
# b.ravel()[0] = 1000   会直接影响到原数组b
# print(b)
"""
注意：b.flatten()与上述功能相同，但是flatten函数会请求分配内存来保存结果，而ravel函数只是返回数组的一个视图
二者的区别：
    两者的区别在于返回拷贝（copy）还是返回视图（view），numpy.flatten()返回一份拷贝，
    对拷贝所做的修改不会影响（reflects）原始矩阵，而numpy.ravel()返回的是视图
    （view，也颇有几分C/C++引用reference的意味），会影响（reflects）原始矩阵。
"""
# 函数b.shape = (6,4) 利用一个正整数元组直接设置数组的维度(将直接改变所操作的数组，即改变原数组的维度)
print(b.transpose())  # 求b的转置矩阵，但不改变数组b(维度)，转置后的维度为4*3*2(顺序刚好颠倒)
b.reshape(2,12) # 改变b的维度(直接作用于数组b)，相比于b.reshape(2,12)，reshape函数不直接作用于b，即b的维度不变
print(b)

# 以上代码复习时还可以继续"精修"(提出新的问题，并测试该函数)

# 利用vstack、dstack、hstack、column_stack、row_stack以及concatenate函数对数组进行水平、垂直和深度等方式的组合
# 等要用的时候再查询，这时候的学习知道有这些函数就好。

# 利用hsplit、vsplit、dsplit和split函数进行分割数组的操作

# ndarray对象还有很多其他的属性，也是等到待用的时候再查

# 利用tolist函数可以将NumPy数组转换成Python列表